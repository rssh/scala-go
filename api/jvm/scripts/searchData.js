pages = [{"l":"api/index.html","n":"API","t":" API","d":"api"},
{"l":"api/gopher.html","n":"gopher","t":"package gopher","d":"gopher"},
{"l":"api/gopher.html","n":"Gopher","t":"val Gopher: JVMGopher","d":"gopher"},
{"l":"api/gopher.html","n":"asChannel","t":"def asChannel[F[_], A](using g: Gopher[F]): ReadChannel[F, A]","d":"gopher"},
{"l":"api/gopher.html","n":"asReadChannel","t":"def asReadChannel[F[_], A](using g: Gopher[F]): ReadChannel[F, A]","d":"gopher"},
{"l":"api/gopher.html","n":"futureInput","t":"def futureInput[F[_], A](f: F[A])(using g: Gopher[F]): ReadChannel[F, A]","d":"gopher"},
{"l":"api/gopher.html","n":"makeChannel","t":"def makeChannel[A](bufSize: Int, autoClose: Boolean)(using g: Gopher[_[_]]): Channel[Monad, A, A]","d":"gopher"},
{"l":"api/gopher.html","n":"makeOnceChannel","t":"def makeOnceChannel[A](using g: Gopher[_[_]]): Channel[Monad, A, A]","d":"gopher"},
{"l":"api/gopher.html","n":"select","t":"def select(using g: Gopher[_[_]]): Select[Monad]","d":"gopher"},
{"l":"api/gopher/Channel.html","n":"Channel","t":"trait Channel[F[_], W, R] extends WriteChannel[F, W] with ReadChannel[F, R] with Closeable","d":"gopher/Channel"},
{"l":"api/gopher/Channel.html","n":"withExpiration","t":"def withExpiration(ttl: FiniteDuration, throwTimeouts: Boolean): ChannelWithExpiration[F, W, R]","d":"gopher/Channel"},
{"l":"api/gopher/Channel.html","n":"flatMap","t":"def flatMap[R1](f: R => ReadChannel[F, R1]): Channel[F, W, R1]","d":"gopher/Channel"},
{"l":"api/gopher/Channel.html","n":"isClosed","t":"def isClosed: Boolean","d":"gopher/Channel"},
{"l":"api/gopher/Channel$.html","n":"Channel","t":"object Channel","d":"gopher/Channel$"},
{"l":"api/gopher/Channel$.html","n":"apply","t":"def apply[F[_], A](using Gopher[F]): Channel[F, A, A]","d":"gopher/Channel$"},
{"l":"api/gopher/Channel$$Read.html","n":"Read","t":"class Read[F[_], A](a: A, ch: ReadChannel[F, A] | F[A])","d":"gopher/Channel$$Read"},
{"l":"api/gopher/Channel$$Read.html","n":"Element","t":"type Element = A","d":"gopher/Channel$$Read"},
{"l":"api/gopher/Channel$$FRead.html","n":"FRead","t":"class FRead[F[_], A](a: A, ch: F[A])","d":"gopher/Channel$$FRead"},
{"l":"api/gopher/Channel$$Write.html","n":"Write","t":"class Write[F[_], A](a: A, ch: WriteChannel[F, A])","d":"gopher/Channel$$Write"},
{"l":"api/gopher/ChannelClosedException.html","n":"ChannelClosedException","t":"class ChannelClosedException extends RuntimeException","d":"gopher/ChannelClosedException"},
{"l":"api/gopher/ChannelWithExpiration.html","n":"ChannelWithExpiration","t":"class ChannelWithExpiration[F[_], W, R](internal: Channel[F, W, R], ttl: FiniteDuration, throwTimeouts: Boolean) extends WriteChannelWithExpiration[F, W] with Channel[F, W, R]","d":"gopher/ChannelWithExpiration"},
{"l":"api/gopher/ChannelWithExpiration.html","n":"qqq","t":"def qqq: Int","d":"gopher/ChannelWithExpiration"},
{"l":"api/gopher/DefaultGopherConfig$.html","n":"DefaultGopherConfig","t":"object DefaultGopherConfig extends GopherConfig","d":"gopher/DefaultGopherConfig$"},
{"l":"api/gopher/DuppedInput.html","n":"DuppedInput","t":"class DuppedInput[F[_], A](origin: ReadChannel[F, A], bufSize: Int)(using api: Gopher[F])","d":"gopher/DuppedInput"},
{"l":"api/gopher/DuppedInput.html","n":"pair","t":"def pair: (Channel[[X] =>> F[X], A, A], Channel[[X] =>> F[X], A, A])","d":"gopher/DuppedInput"},
{"l":"api/gopher/DuppedInput.html","n":"sink1","t":"val sink1: Channel[[X] =>> F[X], A, A]","d":"gopher/DuppedInput"},
{"l":"api/gopher/DuppedInput.html","n":"sink2","t":"val sink2: Channel[[X] =>> F[X], A, A]","d":"gopher/DuppedInput"},
{"l":"api/gopher/DuppedInput.html","n":"CpsSchedulingMonad_F","t":"val CpsSchedulingMonad_F: CpsSchedulingMonad[F]","d":"gopher/DuppedInput"},
{"l":"api/gopher/DuppedInput.html","n":"runner","t":"val runner: F[Unit]","d":"gopher/DuppedInput"},
{"l":"api/gopher/Gopher.html","n":"Gopher","t":"trait Gopher[F[_]]","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"Monad","t":"type Monad[X] = F[X]","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"asyncMonad","t":"def asyncMonad: CpsSchedulingMonad[F]","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"makeChannel","t":"def makeChannel[A](bufSize: Int, autoClose: Boolean): Channel[F, A, A]","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"makeOnceChannel","t":"def makeOnceChannel[A](): Channel[F, A, A]","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"select","t":"def select: Select[F]","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"time","t":"def time: Time[F]","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"setLogFun","t":"def setLogFun(logFun: (Level, String, Throwable | Null) => Unit): (Level, String, Throwable | Null) => Unit","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"log","t":"def log(level: Level, message: String, ex: Throwable | Null): Unit","d":"gopher/Gopher"},
{"l":"api/gopher/Gopher.html","n":"log","t":"def log(level: Level, message: String): Unit","d":"gopher/Gopher"},
{"l":"api/gopher/GopherAPI.html","n":"GopherAPI","t":"trait GopherAPI","d":"gopher/GopherAPI"},
{"l":"api/gopher/GopherAPI.html","n":"apply","t":"def apply[F[_]](cfg: GopherConfig)(implicit evidence$1: CpsSchedulingMonad[F]): Gopher[F]","d":"gopher/GopherAPI"},
{"l":"api/gopher/GopherConfig.html","n":"GopherConfig","t":"trait GopherConfig","d":"gopher/GopherConfig"},
{"l":"api/gopher/JVMGopher.html","n":"JVMGopher","t":"class JVMGopher[F[_]](cfg: JVMGopherConfig)(implicit evidence$1: CpsSchedulingMonad[F]) extends Gopher[F]","d":"gopher/JVMGopher"},
{"l":"api/gopher/JVMGopher.html","n":"makeChannel","t":"def makeChannel[A](bufSize: Int, autoClose: Boolean): Channel[F, A, A]","d":"gopher/JVMGopher"},
{"l":"api/gopher/JVMGopher.html","n":"time","t":"val time: Time[F]","d":"gopher/JVMGopher"},
{"l":"api/gopher/JVMGopher.html","n":"setLogFun","t":"def setLogFun(logFun: (Level, String, Throwable | Null) => Unit): (Level, String, Throwable | Null) => Unit","d":"gopher/JVMGopher"},
{"l":"api/gopher/JVMGopher.html","n":"log","t":"def log(level: Level, message: String, ex: Throwable | Null): Unit","d":"gopher/JVMGopher"},
{"l":"api/gopher/JVMGopher.html","n":"taskExecutor","t":"def taskExecutor: ExecutorService","d":"gopher/JVMGopher"},
{"l":"api/gopher/JVMGopher.html","n":"scheduledExecutor","t":"def scheduledExecutor: ScheduledExecutorService","d":"gopher/JVMGopher"},
{"l":"api/gopher/JVMGopher$.html","n":"JVMGopher","t":"object JVMGopher extends GopherAPI","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopher$.html","n":"apply","t":"def apply[F[_]](cfg: GopherConfig)(implicit evidence$2: CpsSchedulingMonad[F]): Gopher[F]","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopher$.html","n":"timer","t":"val timer: Timer","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopher$.html","n":"scheduledExecutor","t":"val scheduledExecutor: ScheduledExecutorService","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopher$.html","n":"defaultConfig","t":"val defaultConfig: JVMGopherConfig","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopher$.html","n":"logger","t":"val logger: Logger","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopher$.html","n":"defaultLogFun","t":"def defaultLogFun(level: Level, message: String, ex: Throwable | Null): Unit","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopher$.html","n":"MAX_SPINS","t":"val MAX_SPINS: 400","d":"gopher/JVMGopher$"},
{"l":"api/gopher/JVMGopherConfig.html","n":"JVMGopherConfig","t":"class JVMGopherConfig(controlExecutor: ExecutorService, taskExecutor: ExecutorService) extends GopherConfig","d":"gopher/JVMGopherConfig"},
{"l":"api/gopher/JVMTime.html","n":"JVMTime","t":"class JVMTime[F[_]](gopherAPI: JVMGopher[F]) extends Time[F]","d":"gopher/JVMTime"},
{"l":"api/gopher/JVMTime.html","n":"schedule","t":"def schedule(fun: () => Unit, delay: FiniteDuration): Scheduled","d":"gopher/JVMTime"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"JVMScheduled","t":"class JVMScheduled(fun: () => Unit, delay: FiniteDuration) extends Scheduled","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"listeners","t":"val listeners: ConcurrentLinkedQueue[Try[Boolean] => Unit]","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"cancelled","t":"val cancelled: AtomicBoolean","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"wrapper","t":"var wrapper: Runnable","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"jf","t":"val jf: ScheduledFuture[_ <: <FromJavaObject>]","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"notifyListeners","t":"def notifyListeners(value: Try[Boolean]): Unit","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"cancel","t":"def cancel(): Boolean","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/JVMTime$JVMScheduled.html","n":"onDone","t":"def onDone(listener: Try[Boolean] => Unit): Unit","d":"gopher/JVMTime$JVMScheduled"},
{"l":"api/gopher/Platform$.html","n":"Platform","t":"object Platform","d":"gopher/Platform$"},
{"l":"api/gopher/Platform$.html","n":"initShared","t":"def initShared(): Unit","d":"gopher/Platform$"},
{"l":"api/gopher/ReadChannel.html","n":"ReadChannel","t":"trait ReadChannel[F[_], A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"read","t":"type read = A","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"asyncMonad","t":"def asyncMonad: CpsSchedulingMonad[F]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[A]): Unit","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"done","t":"val done: ReadChannel[F, Unit]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"done","t":"type done = Unit","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"aread","t":"def aread(): F[A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"read","t":"def read(): A","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"?","t":"def ?: A","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"atake","t":"def atake(n: Int): F[IndexedSeq[A]]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"take","t":"def take(n: Int): IndexedSeq[A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"aOptRead","t":"def aOptRead(): F[Option[A]]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"optRead","t":"def optRead(): Option[A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"foreach_async","t":"def foreach_async(f: A => F[Unit]): F[Unit]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"aforeach_async","t":"def aforeach_async(f: A => F[Unit]): F[F[Unit]]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"aforeach","t":"def aforeach(f: A => Unit): F[Unit]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"foreach","t":"def foreach(inline f: A => Unit): Unit","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"map","t":"def map[B](f: A => B): ReadChannel[F, B]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"mapAsync","t":"def mapAsync[B](f: A => F[B]): ReadChannel[F, B]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"filter","t":"def filter(p: A => Boolean): ReadChannel[F, A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"filterAsync","t":"def filterAsync(p: A => F[Boolean]): ReadChannel[F, A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"dup","t":"def dup(bufSize: Int, expiration: Duration): (ReadChannel[F, A], ReadChannel[F, A])","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"afold","t":"def afold[S](s0: S)(f: (S, A) => S): F[S]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"afold_async","t":"def afold_async[S](s0: S)(f: (S, A) => F[S]): F[S]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"fold_async","t":"def fold_async[S](s0: S)(f: (S, A) => F[S]): F[S]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"fold","t":"def fold[S](inline s0: S)(inline f: (S, A) => S): S","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"zip","t":"def zip[B](x: ReadChannel[F, B]): ReadChannel[F, (A, B)]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"or","t":"def or(other: ReadChannel[F, A]): ReadChannel[F, A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"|","t":"def |(other: ReadChannel[F, A]): ReadChannel[F, A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel.html","n":"append","t":"def append(other: ReadChannel[F, A]): ReadChannel[F, A]","d":"gopher/ReadChannel"},
{"l":"api/gopher/ReadChannel$DoneReadChannel.html","n":"DoneReadChannel","t":"class DoneReadChannel extends ReadChannel[F, Unit]","d":"gopher/ReadChannel$DoneReadChannel"},
{"l":"api/gopher/ReadChannel$DoneReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[Unit]): Unit","d":"gopher/ReadChannel$DoneReadChannel"},
{"l":"api/gopher/ReadChannel$DoneReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/ReadChannel$DoneReadChannel"},
{"l":"api/gopher/ReadChannel$DoneReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/ReadChannel$DoneReadChannel"},
{"l":"api/gopher/ReadChannel$SimpleReader.html","n":"SimpleReader","t":"class SimpleReader(f: Try[A] => Unit) extends Reader[A]","d":"gopher/ReadChannel$SimpleReader"},
{"l":"api/gopher/ReadChannel$SimpleReader.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/ReadChannel$SimpleReader"},
{"l":"api/gopher/ReadChannel$SimpleReader.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/ReadChannel$SimpleReader"},
{"l":"api/gopher/ReadChannel$SimpleReader.html","n":"capture","t":"def capture(): Option[Try[A] => Unit]","d":"gopher/ReadChannel$SimpleReader"},
{"l":"api/gopher/ReadChannel$SimpleReader.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/ReadChannel$SimpleReader"},
{"l":"api/gopher/ReadChannel$SimpleReader.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/ReadChannel$SimpleReader"},
{"l":"api/gopher/ReadChannel$.html","n":"ReadChannel","t":"object ReadChannel","d":"gopher/ReadChannel$"},
{"l":"api/gopher/ReadChannel$.html","n":"empty","t":"def empty[F[_], A](using Gopher[F]): ReadChannel[F, A]","d":"gopher/ReadChannel$"},
{"l":"api/gopher/ReadChannel$.html","n":"fromIterable","t":"def fromIterable[F[_], A](c: IterableOnce[A])(using Gopher[F]): ReadChannel[F, A]","d":"gopher/ReadChannel$"},
{"l":"api/gopher/ReadChannel$.html","n":"fromFuture","t":"def fromFuture[F[_], A](f: F[A])(using Gopher[F]): ReadChannel[F, A]","d":"gopher/ReadChannel$"},
{"l":"api/gopher/ReadChannel$.html","n":"fromValues","t":"def fromValues[F[_], A](values: A*)(using Gopher[F]): ReadChannel[F, A]","d":"gopher/ReadChannel$"},
{"l":"api/gopher/ReadChannel$.html","n":"unfold","t":"def unfold[S, F[_], A](s: S)(f: S => Option[(A, S)])(using Gopher[F]): ReadChannel[F, A]","d":"gopher/ReadChannel$"},
{"l":"api/gopher/ReadChannel$.html","n":"unfoldAsync","t":"def unfoldAsync[S, F[_], A](s: S)(f: S => F[Option[(A, S)]])(using Gopher[F]): ReadChannel[F, A]","d":"gopher/ReadChannel$"},
{"l":"api/gopher/Select.html","n":"Select","t":"class Select[F[_]](api: Gopher[F])","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"apply","t":"def apply[A](inline pf: PartialFunction[Any, A]): A","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"group","t":"def group[S]: SelectGroup[F, S]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"once","t":"def once[S]: SelectGroup[F, S]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"loop","t":"def loop: SelectLoop[F]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"fold","t":"def fold[S](s0: S)(step: S => S | Done[S]): S","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"fold_async","t":"def fold_async[S](s0: S)(step: S => F[S | Done[S]]): F[S]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"afold","t":"def afold[S](s0: S)(inline step: S => S | Done[S]): F[S]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"afold_async","t":"def afold_async[S](s0: S)(step: S => F[S | Done[S]]): F[S]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"map","t":"def map[A](step: SelectGroup[F, A] => A): ReadChannel[F, A]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"mapAsync","t":"def mapAsync[A](step: SelectGroup[F, A] => F[A]): ReadChannel[F, A]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"forever","t":"def forever: SelectForever[F]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"aforever","t":"def aforever(inline pf: PartialFunction[Any, Unit]): F[Unit]","d":"gopher/Select"},
{"l":"api/gopher/Select.html","n":"aforever_async","t":"def aforever_async(pf: PartialFunction[Any, F[Unit]]): F[Unit]","d":"gopher/Select"},
{"l":"api/gopher/Select$.html","n":"Select","t":"object Select","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"selectListenerBuilder","t":"def selectListenerBuilder[F[_], S, R, L <: SelectListeners[F, S, R]](constructor: Expr[L], caseDefs: List[SelectorCaseExpr[F, S, R]], api: Expr[Gopher[F]])(implicit evidence$20: Type[F], evidence$21: Type[S], evidence$22: Type[R], evidence$23: Type[L], Quotes): Expr[R]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"onceImpl","t":"def onceImpl[F[_], A](pf: Expr[PartialFunction[Any, A]], api: Expr[Gopher[F]])(implicit evidence$24: Type[F], evidence$25: Type[A], Quotes): Expr[A]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"loopImpl","t":"def loopImpl[F[_]](pf: Expr[PartialFunction[Any, Boolean]], api: Expr[Gopher[F]])(implicit evidence$26: Type[F], Quotes): Expr[Unit]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"foreverImpl","t":"def foreverImpl[F[_]](pf: Expr[PartialFunction[Any, Unit]], api: Expr[Gopher[F]])(implicit evidence$27: Type[F], Quotes): Expr[Unit]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"runImpl","t":"def runImpl[F[_], A, B](builder: List[SelectorCaseExpr[F, A, B]] => Expr[B], pf: Expr[PartialFunction[Any, A]])(implicit evidence$28: Type[F], evidence$29: Type[A], evidence$30: Type[B], Quotes): Expr[B]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"runImplTree","t":"def runImplTree[F[_], A, B](using Quotes)(builder: List[SelectorCaseExpr[F, A, B]] => Expr[B], pf: Term)(implicit evidence$31: Type[F], evidence$32: Type[A], evidence$33: Type[B]): Expr[B]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"parseCaseDef","t":"def parseCaseDef[F[_], S, R](using Quotes)(caseDef: CaseDef)(implicit evidence$34: Type[F], evidence$35: Type[S], evidence$36: Type[R]): SelectorCaseExpr[F, S, R]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"parseCaseDefGuard","t":"def parseCaseDefGuard(using Quotes)(caseDef: CaseDef): Map[String, Term]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"parseSelectCondition","t":"def parseSelectCondition(using Quotes)(condition: Term, entries: Map[String, Term]): Map[String, Term]","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"makeLambda","t":"def makeLambda(using Quotes)(argName: String, argType: TypeRepr, oldArgSymbol: Symbol, body: Term): Term","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"substIdent","t":"def substIdent(using Quotes)(term: Term, fromSym: Symbol, toTerm: Term, owner: Symbol): Term","d":"gopher/Select$"},
{"l":"api/gopher/Select$.html","n":"reportError","t":"def reportError(message: String, posExpr: Expr[_])(using Quotes): Nothing","d":"gopher/Select$"},
{"l":"api/gopher/Select$$SelectGroupExpr.html","n":"SelectGroupExpr","t":"trait SelectGroupExpr[F[_], S, R]","d":"gopher/Select$$SelectGroupExpr"},
{"l":"api/gopher/Select$$SelectGroupExpr.html","n":"toExprOf","t":"def toExprOf[X <: SelectListeners[F, S, R]]: Expr[X]","d":"gopher/Select$$SelectGroupExpr"},
{"l":"api/gopher/Select$$SelectorCaseExpr.html","n":"SelectorCaseExpr","t":"trait SelectorCaseExpr[F[_], S, R]","d":"gopher/Select$$SelectorCaseExpr"},
{"l":"api/gopher/Select$$SelectorCaseExpr.html","n":"Monad","t":"type Monad[X] = F[X]","d":"gopher/Select$$SelectorCaseExpr"},
{"l":"api/gopher/Select$$SelectorCaseExpr.html","n":"appended","t":"def appended[L <: SelectListeners[F, S, R]](base: Expr[L])(implicit evidence$37: Type[L], Quotes): Expr[L]","d":"gopher/Select$$SelectorCaseExpr"},
{"l":"api/gopher/Select$$ReadExpression.html","n":"ReadExpression","t":"class ReadExpression[F[_], A, S, R](ch: Expr[ReadChannel[F, A]], f: Expr[A => S], isDone: Boolean)(implicit evidence$5: Type[F], evidence$6: Type[A], evidence$7: Type[S], evidence$8: Type[R]) extends SelectorCaseExpr[F, S, R]","d":"gopher/Select$$ReadExpression"},
{"l":"api/gopher/Select$$ReadExpression.html","n":"appended","t":"def appended[L <: SelectListeners[F, S, R]](base: Expr[L])(implicit evidence$38: Type[L], Quotes): Expr[L]","d":"gopher/Select$$ReadExpression"},
{"l":"api/gopher/Select$$WriteExpression.html","n":"WriteExpression","t":"class WriteExpression[F[_], A, S, R](ch: Expr[WriteChannel[F, A]], a: Expr[A], f: Expr[A => S])(implicit evidence$9: Type[F], evidence$10: Type[A], evidence$11: Type[S], evidence$12: Type[R]) extends SelectorCaseExpr[F, S, R]","d":"gopher/Select$$WriteExpression"},
{"l":"api/gopher/Select$$WriteExpression.html","n":"appended","t":"def appended[L <: SelectListeners[F, S, R]](base: Expr[L])(implicit evidence$42: Type[L], Quotes): Expr[L]","d":"gopher/Select$$WriteExpression"},
{"l":"api/gopher/Select$$TimeoutExpression.html","n":"TimeoutExpression","t":"class TimeoutExpression[F[_], S, R](t: Expr[FiniteDuration], f: Expr[FiniteDuration => S])(implicit evidence$13: Type[F], evidence$14: Type[S], evidence$15: Type[R]) extends SelectorCaseExpr[F, S, R]","d":"gopher/Select$$TimeoutExpression"},
{"l":"api/gopher/Select$$TimeoutExpression.html","n":"appended","t":"def appended[L <: SelectListeners[F, S, R]](base: Expr[L])(implicit evidence$47: Type[L], Quotes): Expr[L]","d":"gopher/Select$$TimeoutExpression"},
{"l":"api/gopher/Select$$DoneExression.html","n":"DoneExression","t":"class DoneExression[F[_], A, S, R](ch: Expr[ReadChannel[F, A]], f: Expr[Unit => S])(implicit evidence$16: Type[F], evidence$17: Type[A], evidence$18: Type[S], evidence$19: Type[R]) extends SelectorCaseExpr[F, S, R]","d":"gopher/Select$$DoneExression"},
{"l":"api/gopher/Select$$DoneExression.html","n":"appended","t":"def appended[L <: SelectListeners[F, S, R]](base: Expr[L])(implicit evidence$51: Type[L], Quotes): Expr[L]","d":"gopher/Select$$DoneExression"},
{"l":"api/gopher/SelectFold$.html","n":"SelectFold","t":"object SelectFold","d":"gopher/SelectFold$"},
{"l":"api/gopher/SelectFold$$Done.html","n":"Done","t":"class Done[S](s: S)","d":"gopher/SelectFold$$Done"},
{"l":"api/gopher/SelectForever.html","n":"SelectForever","t":"class SelectForever[F[_]](api: Gopher[F]) extends SelectGroupBuilder[F, Unit, Unit]","d":"gopher/SelectForever"},
{"l":"api/gopher/SelectForever.html","n":"apply","t":"def apply(inline pf: PartialFunction[Any, Unit]): Unit","d":"gopher/SelectForever"},
{"l":"api/gopher/SelectForever.html","n":"applyAsync","t":"def applyAsync(inline pf: PartialFunction[Any, F[Unit]]): Unit","d":"gopher/SelectForever"},
{"l":"api/gopher/SelectForever.html","n":"runAsync","t":"def runAsync(): F[Unit]","d":"gopher/SelectForever"},
{"l":"api/gopher/SelectGroup.html","n":"SelectGroup","t":"class SelectGroup[F[_], S](api: Gopher[F]) extends SelectListeners[F, S, S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"waitState","t":"val waitState: AtomicInteger","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"call","t":"var call: Try[S] => Unit","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"retval","t":"val retval: F[S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"startTime","t":"val startTime: AtomicLong","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"timeoutScheduled","t":"var timeoutScheduled: Option[Scheduled]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"addReader","t":"def addReader[A](ch: ReadChannel[F, A], action: Try[A] => F[S]): Unit","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"addWriter","t":"def addWriter[A](ch: WriteChannel[F, A], element: A, action: Try[Unit] => F[S]): Unit","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"setTimeout","t":"def setTimeout(timeout: FiniteDuration, action: Try[FiniteDuration] => F[S]): Unit","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"step","t":"def step(): F[S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"runAsync","t":"def runAsync(): F[S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"apply","t":"def apply(inline pf: PartialFunction[Any, S]): S","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"select","t":"def select(inline pf: PartialFunction[Any, S]): S","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"done","t":"def done[S](s: S): Done[S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onRead","t":"def onRead[A](ch: ReadChannel[F, A])(f: A => S): SelectGroup[F, S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onReadAsync","t":"def onReadAsync[A](ch: ReadChannel[F, A])(f: A => F[S]): SelectGroup[F, S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onRead_async","t":"def onRead_async[A](ch: ReadChannel[F, A])(f: A => F[S]): F[SelectGroup[F, S]]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onWrite","t":"def onWrite[A](ch: WriteChannel[F, A], a: => A)(f: A => S): SelectGroup[F, S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onWriteAsync","t":"def onWriteAsync[A](ch: WriteChannel[F, A], a: () => F[A])(f: A => F[S]): SelectGroup[F, S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onTimeout","t":"def onTimeout(t: FiniteDuration)(f: FiniteDuration => S): SelectGroup[F, S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onTimeoutAsync","t":"def onTimeoutAsync(t: FiniteDuration)(f: FiniteDuration => F[S]): SelectGroup[F, S]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup.html","n":"onTimeout_async","t":"def onTimeout_async(t: FiniteDuration)(f: FiniteDuration => F[S]): F[SelectGroup[F, S]]","d":"gopher/SelectGroup"},
{"l":"api/gopher/SelectGroup$Expiration.html","n":"Expiration","t":"trait Expiration","d":"gopher/SelectGroup$Expiration"},
{"l":"api/gopher/SelectGroup$Expiration.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/SelectGroup$Expiration"},
{"l":"api/gopher/SelectGroup$Expiration.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/SelectGroup$Expiration"},
{"l":"api/gopher/SelectGroup$Expiration.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/SelectGroup$Expiration"},
{"l":"api/gopher/SelectGroup$Expiration.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/SelectGroup$Expiration"},
{"l":"api/gopher/SelectGroup$ReaderRecord.html","n":"ReaderRecord","t":"class ReaderRecord[A](ch: ReadChannel[F, A], action: Try[A] => F[S]) extends Reader[A] with Expiration","d":"gopher/SelectGroup$ReaderRecord"},
{"l":"api/gopher/SelectGroup$ReaderRecord.html","n":"Element","t":"type Element = A","d":"gopher/SelectGroup$ReaderRecord"},
{"l":"api/gopher/SelectGroup$ReaderRecord.html","n":"State","t":"type State = S","d":"gopher/SelectGroup$ReaderRecord"},
{"l":"api/gopher/SelectGroup$WriterRecord.html","n":"WriterRecord","t":"class WriterRecord[A](ch: WriteChannel[F, A], element: A, action: Try[Unit] => F[S]) extends Writer[A] with Expiration","d":"gopher/SelectGroup$WriterRecord"},
{"l":"api/gopher/SelectGroup$WriterRecord.html","n":"Element","t":"type Element = A","d":"gopher/SelectGroup$WriterRecord"},
{"l":"api/gopher/SelectGroup$WriterRecord.html","n":"State","t":"type State = S","d":"gopher/SelectGroup$WriterRecord"},
{"l":"api/gopher/SelectGroup$TimeoutRecord.html","n":"TimeoutRecord","t":"class TimeoutRecord(duration: FiniteDuration, action: Try[FiniteDuration] => F[S]) extends Expiration","d":"gopher/SelectGroup$TimeoutRecord"},
{"l":"api/gopher/SelectGroup$TimeoutRecord.html","n":"capture","t":"def capture(): Option[Try[FiniteDuration] => Unit]","d":"gopher/SelectGroup$TimeoutRecord"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"SelectGroupBuilder","t":"class SelectGroupBuilder[F[_], S, R](api: Gopher[F]) extends SelectListeners[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"groupBuilder","t":"var groupBuilder: SelectGroup[F, S] => SelectGroup[F, S]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"m","t":"val m: CpsSchedulingMonad[F]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"onRead","t":"def onRead[A](ch: ReadChannel[F, A])(f: A => S): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"onReadAsync","t":"def onReadAsync[A](ch: ReadChannel[F, A])(f: A => F[S]): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"reading","t":"def reading[A](ch: ReadChannel[F, A])(f: A => S): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"onWrite","t":"def onWrite[A](ch: WriteChannel[F, A], a: => A)(f: A => S): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"onWriteAsync","t":"def onWriteAsync[A](ch: WriteChannel[F, A], a: () => F[A])(f: A => F[S]): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"writing","t":"def writing[A](ch: WriteChannel[F, A], a: => A)(f: A => S): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"onTimeout","t":"def onTimeout(t: FiniteDuration)(f: FiniteDuration => S): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"onTimeoutAsync","t":"def onTimeoutAsync(t: FiniteDuration)(f: FiniteDuration => F[S]): SelectGroupBuilder[F, S, R]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectGroupBuilder.html","n":"asyncMonad","t":"def asyncMonad: CpsSchedulingMonad[F]","d":"gopher/SelectGroupBuilder"},
{"l":"api/gopher/SelectListeners.html","n":"SelectListeners","t":"trait SelectListeners[F[_], S, R]","d":"gopher/SelectListeners"},
{"l":"api/gopher/SelectListeners.html","n":"onRead","t":"def onRead[A](ch: ReadChannel[F, A])(f: A => S): SelectListeners[F, S, R]","d":"gopher/SelectListeners"},
{"l":"api/gopher/SelectListeners.html","n":"onWrite","t":"def onWrite[A](ch: WriteChannel[F, A], a: => A)(f: A => S): SelectListeners[F, S, R]","d":"gopher/SelectListeners"},
{"l":"api/gopher/SelectListeners.html","n":"onTimeout","t":"def onTimeout(t: FiniteDuration)(f: FiniteDuration => S): SelectListeners[F, S, R]","d":"gopher/SelectListeners"},
{"l":"api/gopher/SelectListeners.html","n":"asyncMonad","t":"def asyncMonad: CpsSchedulingMonad[F]","d":"gopher/SelectListeners"},
{"l":"api/gopher/SelectListeners.html","n":"runAsync","t":"def runAsync(): F[R]","d":"gopher/SelectListeners"},
{"l":"api/gopher/SelectListeners.html","n":"run","t":"def run(): R","d":"gopher/SelectListeners"},
{"l":"api/gopher/SelectLoop.html","n":"SelectLoop","t":"class SelectLoop[F[_]](api: Gopher[F]) extends SelectGroupBuilder[F, Boolean, Unit]","d":"gopher/SelectLoop"},
{"l":"api/gopher/SelectLoop.html","n":"apply","t":"def apply(inline pf: PartialFunction[Any, Boolean]): Unit","d":"gopher/SelectLoop"},
{"l":"api/gopher/SelectLoop.html","n":"runAsync","t":"def runAsync(): F[Unit]","d":"gopher/SelectLoop"},
{"l":"api/gopher/SharedGopherAPI$.html","n":"SharedGopherAPI","t":"object SharedGopherAPI","d":"gopher/SharedGopherAPI$"},
{"l":"api/gopher/SharedGopherAPI$.html","n":"apply","t":"def apply[F[_]](cfg: GopherConfig)(implicit evidence$2: CpsSchedulingMonad[F]): Gopher[F]","d":"gopher/SharedGopherAPI$"},
{"l":"api/gopher/SharedGopherAPI$.html","n":"api","t":"def api: GopherAPI","d":"gopher/SharedGopherAPI$"},
{"l":"api/gopher/Time.html","n":"Time","t":"class Time[F[_]](gopherAPI: Gopher[F])","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"after","t":"type after = FiniteDuration","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"after","t":"def after(duration: FiniteDuration): ReadChannel[F, FiniteDuration]","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"asleep","t":"def asleep(duration: FiniteDuration): F[FiniteDuration]","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"sleep","t":"def sleep(duration: FiniteDuration): FiniteDuration","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"tick","t":"def tick(duration: FiniteDuration): ReadChannel[F, FiniteDuration]","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"newTicker","t":"def newTicker(duration: FiniteDuration): Ticker","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"now","t":"def now(): FiniteDuration","d":"gopher/Time"},
{"l":"api/gopher/Time.html","n":"schedule","t":"def schedule(fun: () => Unit, delay: FiniteDuration): Scheduled","d":"gopher/Time"},
{"l":"api/gopher/Time$Ticker.html","n":"Ticker","t":"class Ticker(duration: FiniteDuration)","d":"gopher/Time$Ticker"},
{"l":"api/gopher/Time$Ticker.html","n":"channel","t":"val channel: ChannelWithExpiration[F, FiniteDuration, FiniteDuration]","d":"gopher/Time$Ticker"},
{"l":"api/gopher/Time$Ticker.html","n":"stop","t":"def stop(): Unit","d":"gopher/Time$Ticker"},
{"l":"api/gopher/Time$.html","n":"Time","t":"object Time","d":"gopher/Time$"},
{"l":"api/gopher/Time$.html","n":"after","t":"type after = FiniteDuration","d":"gopher/Time$"},
{"l":"api/gopher/Time$.html","n":"after","t":"def after[F[_]](duration: FiniteDuration)(using Gopher[F]): ReadChannel[F, FiniteDuration]","d":"gopher/Time$"},
{"l":"api/gopher/Time$.html","n":"asleep","t":"def asleep[F[_]](duration: FiniteDuration)(using Gopher[F]): F[FiniteDuration]","d":"gopher/Time$"},
{"l":"api/gopher/Time$.html","n":"sleep","t":"def sleep[F[_]](duration: FiniteDuration)(using Gopher[F]): FiniteDuration","d":"gopher/Time$"},
{"l":"api/gopher/Time$$Scheduled.html","n":"Scheduled","t":"trait Scheduled","d":"gopher/Time$$Scheduled"},
{"l":"api/gopher/Time$$Scheduled.html","n":"cancel","t":"def cancel(): Boolean","d":"gopher/Time$$Scheduled"},
{"l":"api/gopher/Time$$Scheduled.html","n":"onDone","t":"def onDone(listener: Try[Boolean] => Unit): Unit","d":"gopher/Time$$Scheduled"},
{"l":"api/gopher/WriteChannel.html","n":"WriteChannel","t":"trait WriteChannel[F[_], A]","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"write","t":"type write = A","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"asyncMonad","t":"def asyncMonad: CpsAsyncMonad[F]","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"awrite","t":"def awrite(a: A): F[Unit]","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"write","t":"def write(inline a: A): Unit","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"<~","t":"def <~(inline a: A): Unit","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"!","t":"def !(inline a: A): Unit","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"addWriter","t":"def addWriter(writer: Writer[A]): Unit","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"awriteAll","t":"def awriteAll(collection: IterableOnce[A]): F[Unit]","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"writeAll","t":"def writeAll(inline collection: IterableOnce[A]): Unit","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannel.html","n":"withWriteExpiration","t":"def withWriteExpiration(ttl: FiniteDuration, throwTimeouts: Boolean)(using gopherApi: Gopher[F]): WriteChannelWithExpiration[F, A]","d":"gopher/WriteChannel"},
{"l":"api/gopher/WriteChannelWithExpiration.html","n":"WriteChannelWithExpiration","t":"class WriteChannelWithExpiration[F[_], A](internal: WriteChannel[F, A], ttl: FiniteDuration, throwTimeouts: Boolean, gopherApi: Gopher[F]) extends WriteChannel[F, A]","d":"gopher/WriteChannelWithExpiration"},
{"l":"api/gopher/WriteChannelWithExpiration.html","n":"addWriter","t":"def addWriter(writer: Writer[A]): Unit","d":"gopher/WriteChannelWithExpiration"},
{"l":"api/gopher/WriteChannelWithExpiration.html","n":"asyncMonad","t":"def asyncMonad: CpsAsyncMonad[F]","d":"gopher/WriteChannelWithExpiration"},
{"l":"api/gopher/impl.html","n":"gopher.impl","t":"package gopher.impl","d":"gopher/impl"},
{"l":"api/gopher/impl/AppendReadChannel.html","n":"AppendReadChannel","t":"class AppendReadChannel[F[_], A](x: ReadChannel[F, A], y: ReadChannel[F, A]) extends ReadChannel[F, A]","d":"gopher/impl/AppendReadChannel"},
{"l":"api/gopher/impl/AppendReadChannel.html","n":"xClosed","t":"val xClosed: AtomicBoolean","d":"gopher/impl/AppendReadChannel"},
{"l":"api/gopher/impl/AppendReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[A]): Unit","d":"gopher/impl/AppendReadChannel"},
{"l":"api/gopher/impl/AppendReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/AppendReadChannel"},
{"l":"api/gopher/impl/AppendReadChannel$InterceptReader.html","n":"InterceptReader","t":"class InterceptReader(nested: Reader[A]) extends Reader[A]","d":"gopher/impl/AppendReadChannel$InterceptReader"},
{"l":"api/gopher/impl/AppendReadChannel$InterceptReader.html","n":"inUsage","t":"val inUsage: AtomicBoolean","d":"gopher/impl/AppendReadChannel$InterceptReader"},
{"l":"api/gopher/impl/AppendReadChannel$InterceptReader.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/AppendReadChannel$InterceptReader"},
{"l":"api/gopher/impl/AppendReadChannel$InterceptReader.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/impl/AppendReadChannel$InterceptReader"},
{"l":"api/gopher/impl/AppendReadChannel$InterceptReader.html","n":"capture","t":"def capture(): Option[Try[A] => Unit]","d":"gopher/impl/AppendReadChannel$InterceptReader"},
{"l":"api/gopher/impl/AppendReadChannel$InterceptReader.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/impl/AppendReadChannel$InterceptReader"},
{"l":"api/gopher/impl/AppendReadChannel$InterceptReader.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/impl/AppendReadChannel$InterceptReader"},
{"l":"api/gopher/impl/ChFlatMappedChannel.html","n":"ChFlatMappedChannel","t":"class ChFlatMappedChannel[F[_], W, RA, RB](internal: Channel[F, W, RA], f: RA => ReadChannel[F, RB]) extends ChFlatMappedReadChannel[F, RA, RB] with Channel[F, W, RB]","d":"gopher/impl/ChFlatMappedChannel"},
{"l":"api/gopher/impl/ChFlatMappedReadChannel.html","n":"ChFlatMappedReadChannel","t":"class ChFlatMappedReadChannel[F[_], A, B](prev: ReadChannel[F, A], f: A => ReadChannel[F, B]) extends ReadChannel[F, B]","d":"gopher/impl/ChFlatMappedReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[B]): Unit","d":"gopher/impl/ChFlatMappedReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/ChFlatMappedReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/impl/ChFlatMappedReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedReadChannel.html","n":"bChannel","t":"val bChannel: Channel[F, B, B]","d":"gopher/impl/ChFlatMappedReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedReadChannel.html","n":"run","t":"def run(): F[Unit]","d":"gopher/impl/ChFlatMappedReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedTryReadChannel.html","n":"ChFlatMappedTryReadChannel","t":"class ChFlatMappedTryReadChannel[F[_], A, B](prev: ReadChannel[F, Try[A]], f: Try[A] => ReadChannel[F, Try[B]]) extends ReadChannel[F, Try[B]]","d":"gopher/impl/ChFlatMappedTryReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedTryReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[Try[B]]): Unit","d":"gopher/impl/ChFlatMappedTryReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedTryReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/ChFlatMappedTryReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedTryReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/impl/ChFlatMappedTryReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedTryReadChannel.html","n":"bChannel","t":"val bChannel: Channel[F, Try[B], Try[B]]","d":"gopher/impl/ChFlatMappedTryReadChannel"},
{"l":"api/gopher/impl/ChFlatMappedTryReadChannel.html","n":"run","t":"def run(): F[Unit]","d":"gopher/impl/ChFlatMappedTryReadChannel"},
{"l":"api/gopher/impl/Expirable.html","n":"Expirable","t":"trait Expirable[A]","d":"gopher/impl/Expirable"},
{"l":"api/gopher/impl/Expirable.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/Expirable"},
{"l":"api/gopher/impl/Expirable.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/impl/Expirable"},
{"l":"api/gopher/impl/Expirable.html","n":"capture","t":"def capture(): Option[A]","d":"gopher/impl/Expirable"},
{"l":"api/gopher/impl/Expirable.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/impl/Expirable"},
{"l":"api/gopher/impl/Expirable.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/impl/Expirable"},
{"l":"api/gopher/impl/FilteredAsyncChannel.html","n":"FilteredAsyncChannel","t":"class FilteredAsyncChannel[F[_], W, R](internal: Channel[F, W, R], p: R => F[Boolean]) extends FilteredAsyncReadChannel[F, R] with Channel[F, W, R]","d":"gopher/impl/FilteredAsyncChannel"},
{"l":"api/gopher/impl/FilteredAsyncReadChannel.html","n":"FilteredAsyncReadChannel","t":"class FilteredAsyncReadChannel[F[_], A](internal: ReadChannel[F, A], p: A => F[Boolean]) extends ReadChannel[F, A]","d":"gopher/impl/FilteredAsyncReadChannel"},
{"l":"api/gopher/impl/FilteredAsyncReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[A]): Unit","d":"gopher/impl/FilteredAsyncReadChannel"},
{"l":"api/gopher/impl/FilteredAsyncReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/FilteredAsyncReadChannel"},
{"l":"api/gopher/impl/FilteredAsyncReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/impl/FilteredAsyncReadChannel"},
{"l":"api/gopher/impl/FilteredAsyncReadChannel$FilteredReader.html","n":"FilteredReader","t":"class FilteredReader(nested: Reader[A]) extends Reader[A]","d":"gopher/impl/FilteredAsyncReadChannel$FilteredReader"},
{"l":"api/gopher/impl/FilteredAsyncReadChannel$FilteredReader.html","n":"markedUsed","t":"val markedUsed: AtomicBoolean","d":"gopher/impl/FilteredAsyncReadChannel$FilteredReader"},
{"l":"api/gopher/impl/FilteredAsyncReadChannel$FilteredReader.html","n":"wrappedFun","t":"def wrappedFun(fun: Try[A] => Unit): Try[A] => Unit","d":"gopher/impl/FilteredAsyncReadChannel$FilteredReader"},
{"l":"api/gopher/impl/FilteredChannel.html","n":"FilteredChannel","t":"class FilteredChannel[F[_], W, R](internal: Channel[F, W, R], p: R => Boolean) extends FilteredReadChannel[F, R] with Channel[F, W, R]","d":"gopher/impl/FilteredChannel"},
{"l":"api/gopher/impl/FilteredReadChannel.html","n":"FilteredReadChannel","t":"class FilteredReadChannel[F[_], A](internal: ReadChannel[F, A], p: A => Boolean) extends ReadChannel[F, A]","d":"gopher/impl/FilteredReadChannel"},
{"l":"api/gopher/impl/FilteredReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[A]): Unit","d":"gopher/impl/FilteredReadChannel"},
{"l":"api/gopher/impl/FilteredReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/FilteredReadChannel"},
{"l":"api/gopher/impl/FilteredReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/impl/FilteredReadChannel"},
{"l":"api/gopher/impl/FilteredReadChannel$FilteredReader.html","n":"FilteredReader","t":"class FilteredReader(nested: Reader[A]) extends Reader[A]","d":"gopher/impl/FilteredReadChannel$FilteredReader"},
{"l":"api/gopher/impl/FilteredReadChannel$FilteredReader.html","n":"markedUsed","t":"val markedUsed: AtomicBoolean","d":"gopher/impl/FilteredReadChannel$FilteredReader"},
{"l":"api/gopher/impl/FilteredReadChannel$FilteredReader.html","n":"wrappedFun","t":"def wrappedFun(fun: Try[A] => Unit): Try[A] => Unit","d":"gopher/impl/FilteredReadChannel$FilteredReader"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel.html","n":"GuardedSPSCBaseChannel","t":"class GuardedSPSCBaseChannel[F[_], A](val gopherApi: JVMGopher[F], controlExecutor: ExecutorService, taskExecutor: ExecutorService)(implicit evidence$1: CpsAsyncMonad[F]) extends Channel[F, A, A]","d":"gopher/impl/GuardedSPSCBaseChannel"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel.html","n":"gopherApi","t":"val gopherApi: JVMGopher[F]","d":"gopher/impl/GuardedSPSCBaseChannel"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel.html","n":"addReader","t":"def addReader(reader: Reader[A]): Unit","d":"gopher/impl/GuardedSPSCBaseChannel"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel.html","n":"addWriter","t":"def addWriter(writer: Writer[A]): Unit","d":"gopher/impl/GuardedSPSCBaseChannel"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/GuardedSPSCBaseChannel"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel.html","n":"close","t":"def close(): Unit","d":"gopher/impl/GuardedSPSCBaseChannel"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel.html","n":"isClosed","t":"def isClosed: Boolean","d":"gopher/impl/GuardedSPSCBaseChannel"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel$.html","n":"GuardedSPSCBaseChannel","t":"object GuardedSPSCBaseChannel","d":"gopher/impl/GuardedSPSCBaseChannel$"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel$.html","n":"STEP_FREE","t":"val STEP_FREE: 0","d":"gopher/impl/GuardedSPSCBaseChannel$"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel$.html","n":"STEP_BUSY","t":"val STEP_BUSY: 1","d":"gopher/impl/GuardedSPSCBaseChannel$"},
{"l":"api/gopher/impl/GuardedSPSCBaseChannel$.html","n":"STEP_UPDATED","t":"val STEP_UPDATED: 2","d":"gopher/impl/GuardedSPSCBaseChannel$"},
{"l":"api/gopher/impl/GuardedSPSCBufferedChannel.html","n":"GuardedSPSCBufferedChannel","t":"class GuardedSPSCBufferedChannel[F[_], A](gopherApi: JVMGopher[F], bufSize: Int, controlExecutor: ExecutorService, taskExecutor: ExecutorService)(implicit evidence$1: CpsAsyncMonad[F]) extends GuardedSPSCBaseChannel[F, A]","d":"gopher/impl/GuardedSPSCBufferedChannel"},
{"l":"api/gopher/impl/GuardedSPSCBufferedChannel$RingBuffer.html","n":"RingBuffer","t":"class RingBuffer extends SPSCBuffer[A]","d":"gopher/impl/GuardedSPSCBufferedChannel$RingBuffer"},
{"l":"api/gopher/impl/GuardedSPSCBufferedChannel$RingBuffer.html","n":"refs","t":"val refs: AtomicReferenceArray[AnyRef | Null]","d":"gopher/impl/GuardedSPSCBufferedChannel$RingBuffer"},
{"l":"api/gopher/impl/GuardedSPSCBufferedChannel$RingBuffer.html","n":"publishedStart","t":"val publishedStart: AtomicInteger","d":"gopher/impl/GuardedSPSCBufferedChannel$RingBuffer"},
{"l":"api/gopher/impl/GuardedSPSCBufferedChannel$RingBuffer.html","n":"publishedSize","t":"val publishedSize: AtomicInteger","d":"gopher/impl/GuardedSPSCBufferedChannel$RingBuffer"},
{"l":"api/gopher/impl/GuardedSPSCBufferedChannel$RingBuffer.html","n":"start","t":"var start: Int","d":"gopher/impl/GuardedSPSCBufferedChannel$RingBuffer"},
{"l":"api/gopher/impl/GuardedSPSCBufferedChannel$RingBuffer.html","n":"size","t":"var size: Int","d":"gopher/impl/GuardedSPSCBufferedChannel$RingBuffer"},
{"l":"api/gopher/impl/GuardedSPSCUnbufferedChannel.html","n":"GuardedSPSCUnbufferedChannel","t":"class GuardedSPSCUnbufferedChannel[F[_], A](gopherApi: JVMGopher[F], controlExecutor: ExecutorService, taskExecutor: ExecutorService)(implicit evidence$1: CpsAsyncMonad[F]) extends GuardedSPSCBaseChannel[F, A]","d":"gopher/impl/GuardedSPSCUnbufferedChannel"},
{"l":"api/gopher/impl/MappedAsyncChannel.html","n":"MappedAsyncChannel","t":"class MappedAsyncChannel[F[_], W, RA, RB](internal: Channel[F, W, RA], f: RA => F[RB]) extends MappedAsyncReadChannel[F, RA, RB] with Channel[F, W, RB]","d":"gopher/impl/MappedAsyncChannel"},
{"l":"api/gopher/impl/MappedAsyncReadChannel.html","n":"MappedAsyncReadChannel","t":"class MappedAsyncReadChannel[F[_], A, B](internal: ReadChannel[F, A], f: A => F[B]) extends ReadChannel[F, B]","d":"gopher/impl/MappedAsyncReadChannel"},
{"l":"api/gopher/impl/MappedAsyncReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/MappedAsyncReadChannel"},
{"l":"api/gopher/impl/MappedAsyncReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[B]): Unit","d":"gopher/impl/MappedAsyncReadChannel"},
{"l":"api/gopher/impl/MappedAsyncReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/impl/MappedAsyncReadChannel"},
{"l":"api/gopher/impl/MappedAsyncReadChannel$MReader.html","n":"MReader","t":"class MReader(nested: Reader[B]) extends Reader[A]","d":"gopher/impl/MappedAsyncReadChannel$MReader"},
{"l":"api/gopher/impl/MappedAsyncReadChannel$MReader.html","n":"wrappedFun","t":"def wrappedFun(fun: Try[B] => Unit): Try[A] => Unit","d":"gopher/impl/MappedAsyncReadChannel$MReader"},
{"l":"api/gopher/impl/MappedChannel.html","n":"MappedChannel","t":"class MappedChannel[F[_], W, RA, RB](internal: Channel[F, W, RA], f: RA => RB) extends MappedReadChannel[F, RA, RB] with Channel[F, W, RB]","d":"gopher/impl/MappedChannel"},
{"l":"api/gopher/impl/MappedReadChannel.html","n":"MappedReadChannel","t":"class MappedReadChannel[F[_], A, B](internal: ReadChannel[F, A], f: A => B) extends ReadChannel[F, B]","d":"gopher/impl/MappedReadChannel"},
{"l":"api/gopher/impl/MappedReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[B]): Unit","d":"gopher/impl/MappedReadChannel"},
{"l":"api/gopher/impl/MappedReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/MappedReadChannel"},
{"l":"api/gopher/impl/MappedReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/impl/MappedReadChannel"},
{"l":"api/gopher/impl/MappedReadChannel$MReader.html","n":"MReader","t":"class MReader(nested: Reader[B]) extends Reader[A]","d":"gopher/impl/MappedReadChannel$MReader"},
{"l":"api/gopher/impl/MappedReadChannel$MReader.html","n":"wrappedFun","t":"def wrappedFun(fun: Try[B] => Unit): Try[A] => Unit","d":"gopher/impl/MappedReadChannel$MReader"},
{"l":"api/gopher/impl/NesteWriterWithExpireTime.html","n":"NesteWriterWithExpireTime","t":"class NesteWriterWithExpireTime[A](nested: Writer[A], expireTimeMillis: Long) extends Writer[A]","d":"gopher/impl/NesteWriterWithExpireTime"},
{"l":"api/gopher/impl/NesteWriterWithExpireTime.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/NesteWriterWithExpireTime"},
{"l":"api/gopher/impl/NesteWriterWithExpireTime.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/impl/NesteWriterWithExpireTime"},
{"l":"api/gopher/impl/NesteWriterWithExpireTime.html","n":"capture","t":"def capture(): Option[(A, Try[Unit] => Unit)]","d":"gopher/impl/NesteWriterWithExpireTime"},
{"l":"api/gopher/impl/NesteWriterWithExpireTime.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/impl/NesteWriterWithExpireTime"},
{"l":"api/gopher/impl/NesteWriterWithExpireTime.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/impl/NesteWriterWithExpireTime"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"NestedWriterWithExpireTimeThrowing","t":"class NestedWriterWithExpireTimeThrowing[F[_], A](nested: Writer[A], expireTimeMillis: Long, gopherApi: Gopher[F]) extends Writer[A]","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"scheduledThrow","t":"val scheduledThrow: Scheduled","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"capture","t":"def capture(): Option[(A, Try[Unit] => Unit)]","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/NestedWriterWithExpireTimeThrowing.html","n":"checkExpire","t":"def checkExpire(): Unit","d":"gopher/impl/NestedWriterWithExpireTimeThrowing"},
{"l":"api/gopher/impl/OrReadChannel.html","n":"OrReadChannel","t":"class OrReadChannel[F[_], A](x: ReadChannel[F, A], y: ReadChannel[F, A]) extends ReadChannel[F, A]","d":"gopher/impl/OrReadChannel"},
{"l":"api/gopher/impl/OrReadChannel.html","n":"xClosed","t":"val xClosed: AtomicBoolean","d":"gopher/impl/OrReadChannel"},
{"l":"api/gopher/impl/OrReadChannel.html","n":"yClosed","t":"val yClosed: AtomicBoolean","d":"gopher/impl/OrReadChannel"},
{"l":"api/gopher/impl/OrReadChannel.html","n":"addReader","t":"def addReader(reader: Reader[A]): Unit","d":"gopher/impl/OrReadChannel"},
{"l":"api/gopher/impl/OrReadChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/OrReadChannel"},
{"l":"api/gopher/impl/OrReadChannel.html","n":"gopherApi","t":"def gopherApi: Gopher[F]","d":"gopher/impl/OrReadChannel"},
{"l":"api/gopher/impl/OrReadChannel.html","n":"addCommonReader","t":"def addCommonReader[C](common: C, addReaderFun: (C, ReadChannel[F, A]) => Unit): Unit","d":"gopher/impl/OrReadChannel"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"CommonBase","t":"class CommonBase[B](nested: Reader[B])","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"inUse","t":"val inUse: AtomicReference[ReadChannel[F, A]]","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"used","t":"val used: AtomicBoolean","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"intercept","t":"def intercept(readFun: Try[B] => Unit): Try[B] => Unit","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"setClosed","t":"def setClosed(): Boolean","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"passToNested","t":"def passToNested(v: Try[B], readFun: Try[B] => Unit): Unit","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"passIfClosed","t":"def passIfClosed(v: Try[B], readFun: Try[B] => Unit): Unit","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"capture","t":"def capture(fromChannel: ReadChannel[F, A]): Option[Try[B] => Unit]","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"markFree","t":"def markFree(fromChannel: ReadChannel[F, A]): Unit","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"markUsed","t":"def markUsed(fromChannel: ReadChannel[F, A]): Unit","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"isExpired","t":"def isExpired(fromChannel: ReadChannel[F, A]): Boolean","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonBase.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/OrReadChannel$CommonBase"},
{"l":"api/gopher/impl/OrReadChannel$CommonReader.html","n":"CommonReader","t":"class CommonReader(nested: Reader[A]) extends CommonBase[A]","d":"gopher/impl/OrReadChannel$CommonReader"},
{"l":"api/gopher/impl/OrReadChannel$CommonReader.html","n":"intercept","t":"def intercept(readFun: Try[A] => Unit): Try[A] => Unit","d":"gopher/impl/OrReadChannel$CommonReader"},
{"l":"api/gopher/impl/OrReadChannel$WrappedReader.html","n":"WrappedReader","t":"class WrappedReader[B](common: CommonBase[B], owner: ReadChannel[F, A]) extends Reader[B]","d":"gopher/impl/OrReadChannel$WrappedReader"},
{"l":"api/gopher/impl/OrReadChannel$WrappedReader.html","n":"capture","t":"def capture(): Option[Try[B] => Unit]","d":"gopher/impl/OrReadChannel$WrappedReader"},
{"l":"api/gopher/impl/OrReadChannel$WrappedReader.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/OrReadChannel$WrappedReader"},
{"l":"api/gopher/impl/OrReadChannel$WrappedReader.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/impl/OrReadChannel$WrappedReader"},
{"l":"api/gopher/impl/OrReadChannel$WrappedReader.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/impl/OrReadChannel$WrappedReader"},
{"l":"api/gopher/impl/OrReadChannel$WrappedReader.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/impl/OrReadChannel$WrappedReader"},
{"l":"api/gopher/impl/OrReadChannel$DoneCommonReader.html","n":"DoneCommonReader","t":"class DoneCommonReader(nested: Reader[Unit]) extends CommonBase[Unit]","d":"gopher/impl/OrReadChannel$DoneCommonReader"},
{"l":"api/gopher/impl/OrReadChannel$DoneCommonReader.html","n":"intercept","t":"def intercept(nestedFun: Try[Unit] => Unit): Try[Unit] => Unit","d":"gopher/impl/OrReadChannel$DoneCommonReader"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"PromiseChannel","t":"class PromiseChannel[F[_], A](val gopherApi: JVMGopher[F], taskExecutor: ExecutorService) extends Channel[F, A, A]","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"gopherApi","t":"val gopherApi: JVMGopher[F]","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"addReader","t":"def addReader(reader: Reader[A]): Unit","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"addWriter","t":"def addWriter(writer: Writer[A]): Unit","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"addDoneReader","t":"def addDoneReader(reader: Reader[Unit]): Unit","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"close","t":"def close(): Unit","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"isClosed","t":"def isClosed: Boolean","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"step","t":"def step(): Unit","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/PromiseChannel.html","n":"closeAll","t":"def closeAll(): Unit","d":"gopher/impl/PromiseChannel"},
{"l":"api/gopher/impl/Reader.html","n":"Reader","t":"trait Reader[A] extends Expirable[Try[A] => Unit]","d":"gopher/impl/Reader"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"SPSCBuffer","t":"trait SPSCBuffer[A]","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"isEmpty","t":"def isEmpty(): Boolean","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"startRead","t":"def startRead(): A","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"finishRead","t":"def finishRead(): Boolean","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"isFull","t":"def isFull(): Boolean","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"write","t":"def write(a: A): Boolean","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"local","t":"def local(): Unit","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SPSCBuffer.html","n":"publish","t":"def publish(): Unit","d":"gopher/impl/SPSCBuffer"},
{"l":"api/gopher/impl/SimpleWriter.html","n":"SimpleWriter","t":"class SimpleWriter[A](a: A, f: Try[Unit] => Unit) extends Writer[A]","d":"gopher/impl/SimpleWriter"},
{"l":"api/gopher/impl/SimpleWriter.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/SimpleWriter"},
{"l":"api/gopher/impl/SimpleWriter.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/impl/SimpleWriter"},
{"l":"api/gopher/impl/SimpleWriter.html","n":"capture","t":"def capture(): Option[(A, Try[Unit] => Unit)]","d":"gopher/impl/SimpleWriter"},
{"l":"api/gopher/impl/SimpleWriter.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/impl/SimpleWriter"},
{"l":"api/gopher/impl/SimpleWriter.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/impl/SimpleWriter"},
{"l":"api/gopher/impl/SimpleWriterWithExpireTime.html","n":"SimpleWriterWithExpireTime","t":"class SimpleWriterWithExpireTime[A](a: A, f: Try[Unit] => Unit, expireTimeMillis: Long) extends Writer[A]","d":"gopher/impl/SimpleWriterWithExpireTime"},
{"l":"api/gopher/impl/SimpleWriterWithExpireTime.html","n":"canExpire","t":"def canExpire: Boolean","d":"gopher/impl/SimpleWriterWithExpireTime"},
{"l":"api/gopher/impl/SimpleWriterWithExpireTime.html","n":"isExpired","t":"def isExpired: Boolean","d":"gopher/impl/SimpleWriterWithExpireTime"},
{"l":"api/gopher/impl/SimpleWriterWithExpireTime.html","n":"capture","t":"def capture(): Option[(A, Try[Unit] => Unit)]","d":"gopher/impl/SimpleWriterWithExpireTime"},
{"l":"api/gopher/impl/SimpleWriterWithExpireTime.html","n":"markUsed","t":"def markUsed(): Unit","d":"gopher/impl/SimpleWriterWithExpireTime"},
{"l":"api/gopher/impl/SimpleWriterWithExpireTime.html","n":"markFree","t":"def markFree(): Unit","d":"gopher/impl/SimpleWriterWithExpireTime"},
{"l":"api/gopher/impl/Writer.html","n":"Writer","t":"trait Writer[A] extends Expirable[(A, Try[Unit] => Unit)]","d":"gopher/impl/Writer"},
{"l":"api/gopher/monads.html","n":"gopher.monads","t":"package gopher.monads","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"ReadChannelCpsMonad","t":"given ReadChannelCpsMonad[F[_]](using val x$1: Gopher[F]): CpsMonad[[A] =>> ReadChannel[F, A]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"pure","t":"def pure[T](t: T): ReadChannel[F, T]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"map","t":"def map[A, B](fa: ReadChannel[F, A])(f: A => B): ReadChannel[F, B]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"flatMap","t":"def flatMap[A, B](fa: ReadChannel[F, A])(f: A => ReadChannel[F, B]): ReadChannel[F, B]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"ReadTryChannelCpsMonad","t":"given ReadTryChannelCpsMonad[F[_]](using val x$1: Gopher[F]): CpsAsyncMonad[[A] =>> ReadChannel[F, Try[A]]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"FW","t":"type FW[T] = [A] =>> ReadChannel[F, Try[A]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"pure","t":"def pure[T](t: T): ReadChannel[F, Try[T]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"map","t":"def map[A, B](fa: ReadChannel[F, Try[A]])(f: A => B): ReadChannel[F, Try[B]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"flatMap","t":"def flatMap[A, B](fa: ReadChannel[F, Try[A]])(f: A => ReadChannel[F, Try[B]]): ReadChannel[F, Try[B]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"flatMapTry","t":"def flatMapTry[A, B](fa: ReadChannel[F, Try[A]])(f: Try[A] => ReadChannel[F, Try[B]]): ReadChannel[F, Try[B]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"error","t":"def error[A](e: Throwable): ReadChannel[F, Try[A]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"adoptCallbackStyle","t":"def adoptCallbackStyle[A](source: Try[A] => Unit => Unit): ReadChannel[F, Try[A]]","d":"gopher/monads"},
{"l":"api/gopher/monads/futureToReadChannel.html","n":"futureToReadChannel","t":"given futureToReadChannel[F[_]](using val x$1: Gopher[F]): CpsMonadConversion[F, [A] =>> ReadChannel[F, A]]","d":"gopher/monads"},
{"l":"api/gopher/monads/futureToReadChannel.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads"},
{"l":"api/gopher/monads/futureToReadChannel.html","n":"apply","t":"def apply[T](ft: F[T]): ReadChannel[F, T]","d":"gopher/monads"},
{"l":"api/gopher/monads/readChannelToTryReadChannel.html","n":"readChannelToTryReadChannel","t":"given readChannelToTryReadChannel[F[_]](using val x$1: Gopher[F]): CpsMonadConversion[[A] =>> ReadChannel[F, A], [A] =>> ReadChannel[F, Try[A]]]","d":"gopher/monads"},
{"l":"api/gopher/monads/readChannelToTryReadChannel.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads"},
{"l":"api/gopher/monads/readChannelToTryReadChannel.html","n":"apply","t":"def apply[T](ft: ReadChannel[F, T]): ReadChannel[F, Try[T]]","d":"gopher/monads"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"ReadChannelCpsMonad","t":"given ReadChannelCpsMonad[F[_]](using val x$1: Gopher[F]): CpsMonad[[A] =>> ReadChannel[F, A]]","d":"gopher/monads/ReadChannelCpsMonad"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads/ReadChannelCpsMonad"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"pure","t":"def pure[T](t: T): ReadChannel[F, T]","d":"gopher/monads/ReadChannelCpsMonad"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"map","t":"def map[A, B](fa: ReadChannel[F, A])(f: A => B): ReadChannel[F, B]","d":"gopher/monads/ReadChannelCpsMonad"},
{"l":"api/gopher/monads/ReadChannelCpsMonad.html","n":"flatMap","t":"def flatMap[A, B](fa: ReadChannel[F, A])(f: A => ReadChannel[F, B]): ReadChannel[F, B]","d":"gopher/monads/ReadChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"ReadTryChannelCpsMonad","t":"given ReadTryChannelCpsMonad[F[_]](using val x$1: Gopher[F]): CpsAsyncMonad[[A] =>> ReadChannel[F, Try[A]]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"FW","t":"type FW[T] = [A] =>> ReadChannel[F, Try[A]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"pure","t":"def pure[T](t: T): ReadChannel[F, Try[T]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"map","t":"def map[A, B](fa: ReadChannel[F, Try[A]])(f: A => B): ReadChannel[F, Try[B]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"flatMap","t":"def flatMap[A, B](fa: ReadChannel[F, Try[A]])(f: A => ReadChannel[F, Try[B]]): ReadChannel[F, Try[B]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"flatMapTry","t":"def flatMapTry[A, B](fa: ReadChannel[F, Try[A]])(f: Try[A] => ReadChannel[F, Try[B]]): ReadChannel[F, Try[B]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"error","t":"def error[A](e: Throwable): ReadChannel[F, Try[A]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/ReadTryChannelCpsMonad.html","n":"adoptCallbackStyle","t":"def adoptCallbackStyle[A](source: Try[A] => Unit => Unit): ReadChannel[F, Try[A]]","d":"gopher/monads/ReadTryChannelCpsMonad"},
{"l":"api/gopher/monads/futureToReadChannel.html","n":"futureToReadChannel","t":"given futureToReadChannel[F[_]](using val x$1: Gopher[F]): CpsMonadConversion[F, [A] =>> ReadChannel[F, A]]","d":"gopher/monads/futureToReadChannel"},
{"l":"api/gopher/monads/futureToReadChannel.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads/futureToReadChannel"},
{"l":"api/gopher/monads/futureToReadChannel.html","n":"apply","t":"def apply[T](ft: F[T]): ReadChannel[F, T]","d":"gopher/monads/futureToReadChannel"},
{"l":"api/gopher/monads/readChannelToTryReadChannel.html","n":"readChannelToTryReadChannel","t":"given readChannelToTryReadChannel[F[_]](using val x$1: Gopher[F]): CpsMonadConversion[[A] =>> ReadChannel[F, A], [A] =>> ReadChannel[F, Try[A]]]","d":"gopher/monads/readChannelToTryReadChannel"},
{"l":"api/gopher/monads/readChannelToTryReadChannel.html","n":"x$1","t":"val x$1: Gopher[F]","d":"gopher/monads/readChannelToTryReadChannel"},
{"l":"api/gopher/monads/readChannelToTryReadChannel.html","n":"apply","t":"def apply[T](ft: ReadChannel[F, T]): ReadChannel[F, Try[T]]","d":"gopher/monads/readChannelToTryReadChannel"},
{"l":"api/index.html","n":"API","t":" API","d":"api"}];